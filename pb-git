#!/usr/bin/env python2.7
from pb_git import cmds
import argparse
import sys

def main(argv):
    parser = argparse.ArgumentParser(
            formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    cmds.init_argparse(parser)
    subparsers = parser.add_subparsers()

    p = subparsers.add_parser('checkout',
            help='Checkout all repos described by *.ini files, cloning and fetching as needed.',
            description='Checkout all repos described by *.ini files, cloning and fetching as needed. This will put the repos into "detached HEAD" state, just like git-submodules. Someday, we might add branch support.',
            #aliases=['co'],
            )
    p.set_defaults(func=cmds.checkout)

    p = subparsers.add_parser('prepare',
            help='Prepare to submit the current changes.',
            description='Prepare to submit the current changes, and `p4 edit` them. Work with intermediate *.ini.bak files. Users may run this command as often as they like. It is perfectly safe always. They must then run `p4 submit` themselves.',
            )
    p.add_argument('--no-verify',
            action='store_true',
            help='Do not perform the verify step.',
            )
    p.set_defaults(func=cmds.prepare)

    p = subparsers.add_parser('verify',
            help='Prove that the commit is actually available from a fresh checkout.',
            description='This will become faster when we have caching. Note that `prepare` can call this itself.',
            )
    p.set_defaults(func=cmds.verify)

    p = subparsers.add_parser('pull',
            help='Sync repos using a branch from the remotes.',
            description='In each repo, switch to (creating if necessary) the named local branch. Then fetch that branch from the named remote. Finally rebase onto the tip of the remote tracking branch.',
            epilog='This can be used to update all your repos with the named branch. All repos need to use the same remote-name and branch-name. Note that you will still need to run "pb-git prepare" and "p4 submit" yourself. In fact, this sub-command is strictly for convenience, as you could simply run "git pull" in each repo yourself.',
            )
    p.add_argument('--remote',
            default='origin',
            help='The remote is expected to be in GitHub.',
            )
    p.add_argument('--branch',
            default='master',
            help='This should be consistent amongst all repos.',
            )
    p.add_argument('repos',
            nargs='*',
            help='If any repo is missing this branch, then you will have to specify which repos you want',
            )
    p.set_defaults(func=cmds.pull)

    args = parser.parse_args(argv[1:])
    args.func(args)

main(sys.argv)
